// Code generated by MockGen. DO NOT EDIT.
// Source: data_store.go
//
// Generated by this command:
//
//	mockgen -source=data_store.go -destination=mocks/data_store_mocks.go
//

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	models "github.com/clydotron/go-micro-log-service/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLogRepo is a mock of LogRepo interface.
type MockLogRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLogRepoMockRecorder
}

// MockLogRepoMockRecorder is the mock recorder for MockLogRepo.
type MockLogRepoMockRecorder struct {
	mock *MockLogRepo
}

// NewMockLogRepo creates a new mock instance.
func NewMockLogRepo(ctrl *gomock.Controller) *MockLogRepo {
	mock := &MockLogRepo{ctrl: ctrl}
	mock.recorder = &MockLogRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogRepo) EXPECT() *MockLogRepoMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockLogRepo) All() ([]*models.LogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*models.LogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockLogRepoMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockLogRepo)(nil).All))
}

// Insert mocks base method.
func (m *MockLogRepo) Insert(entry models.LogEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockLogRepoMockRecorder) Insert(entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockLogRepo)(nil).Insert), entry)
}
