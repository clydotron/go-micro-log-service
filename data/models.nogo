// package data

// import (
// 	"context"
// 	"log"
// 	"time"

// 	"go.mongodb.org/mongo-driver/bson"
// 	"go.mongodb.org/mongo-driver/bson/primitive"
// 	"go.mongodb.org/mongo-driver/mongo"
// 	"go.mongodb.org/mongo-driver/mongo/options"
// )

// // MongoDB cheatsheet:
// // https://www.mongodb.com/developer/products/mongodb/cheat-sheet/
// // from command line: mongo -u <username> -p <password>
// // show dbs
// // use <dbname>
// // show collections
// // db.logs.find() to see all items in the 'logs' collection

// type LogRepo interface {
// 	Insert(entry LogEntry) error
// }

// type DataStore struct {
// 	LogRepo LogRepo
// }

// type LogEntry struct {
// 	ID        string    `bson:"_id,omitempty" json:"id,omitempty"`
// 	Name      string    `bson:"name" json:"name"`
// 	Data      string    `bson:"data" json:"data"`
// 	CreatedAt time.Time `bson:"created_at" json:"created_at"`
// 	UpdatedAt time.Time `bson:"updated_at" json:"updated_at"`
// }

// //var client *mongo.Client

// func NewDataStore(mongo *mongo.Client) DataStore {

// 	return DataStore{
// 		LogRepo: NewLogRepo{client: mongo},
// 	}
// }

// func (l *LogRepo) All() ([]*LogEntry, error) {
// 	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
// 	defer cancel()

// 	collection := l.client.Database(dbName).Collection(collectionName)

// 	opts := options.Find()
// 	opts.SetSort(bson.D{{Key: "created_at", Value: -1}})

// 	cursor, err := collection.Find(context.TODO(), bson.D{}, opts)
// 	if err != nil {
// 		log.Println("Error finding all docs:", err)
// 		return nil, err
// 	}
// 	defer cursor.Close(ctx)

// 	var logs []*LogEntry
// 	for cursor.Next(ctx) {
// 		var entry LogEntry
// 		if err = cursor.Decode(&entry); err != nil {
// 			log.Println("Error reading log entry:", err)
// 			return nil, err
// 		}
// 		logs = append(logs, &entry)
// 	}
// 	return logs, nil
// }

// func (l *LogRepo) GetOne(id string) (*LogEntry, error) {
// 	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
// 	defer cancel()

// 	collection := l.client.Database(dbName).Collection(collectionName)

// 	docID, err := primitive.ObjectIDFromHex(id)
// 	if err != nil {
// 		return nil, err
// 	}

// 	var entry LogEntry
// 	err = collection.FindOne(ctx, bson.M{"_id": docID}).Decode(&entry)
// 	if err != nil {
// 		return nil, err
// 	}

// 	return &entry, nil
// }

// func (l *LogRepo) DropCollection() error {
// 	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
// 	defer cancel()

// 	collection := l.client.Database(dbName).Collection(collectionName)

// 	if err := collection.Drop(ctx); err != nil {
// 		return err
// 	}
// 	return nil
// }

// // Update.... (why would you update a log entry?)
// // func (l *LogEntry) Update() (*mongo.UpdateResult, error) {
// // 	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
// // 	defer cancel()

// // 	collection := l.client.Database(dbName).Collection(collectionName)

// // 	docID, err := primitive.ObjectIDFromHex(l.ID)
// // 	if err != nil {
// // 		return nil, err
// // 	}

// // 	result, err := collection.UpdateOne(
// // 		ctx,
// // 		bson.M{"_id": docID},
// // 		bson.D{
// // 			{Key: "$set", Value: bson.D{
// // 				{Key: "name", Value: l.Name},
// // 				{Key: "data", Value: l.Data},
// // 				{Key: "updated_at", Value: time.Now()},
// // 			}},
// // 		},
// // 	)
// // 	if err != nil {
// // 		return nil, err
// // 	}

// // 	return result, nil
// // }
